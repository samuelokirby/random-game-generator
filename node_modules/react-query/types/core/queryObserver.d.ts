import { QueryObserverOptions, QueryObserverResult, RefetchOptions, ResultOptions } from './types';
import { Query, Action, FetchOptions } from './query';
import { QueryClient } from './queryClient';
import { Subscribable } from './subscribable';
declare type QueryObserverListener<TData, TError> = (result: QueryObserverResult<TData, TError>) => void;
export interface ObserverFetchOptions extends FetchOptions {
    throwOnError?: boolean;
}
export declare class QueryObserver<TData = unknown, TError = unknown, TQueryFnData = TData, TQueryData = TQueryFnData> extends Subscribable<QueryObserverListener<TData, TError>> {
    options: QueryObserverOptions<TData, TError, TQueryFnData, TQueryData>;
    private client;
    private currentQuery;
    private currentResult;
    private currentResultState?;
    private previousQueryResult?;
    private initialDataUpdateCount;
    private initialErrorUpdateCount;
    private staleTimeoutId?;
    private refetchIntervalId?;
    constructor(client: QueryClient, options: QueryObserverOptions<TData, TError, TQueryFnData, TQueryData>);
    protected bindMethods(): void;
    protected onSubscribe(): void;
    protected onUnsubscribe(): void;
    willLoadOnMount(): boolean;
    willRefetchOnMount(): boolean;
    willFetchOnMount(): boolean;
    willFetchOnReconnect(): boolean;
    willFetchOnWindowFocus(): boolean;
    private willFetchOptionally;
    private isStale;
    destroy(): void;
    setOptions(options?: QueryObserverOptions<TData, TError, TQueryFnData, TQueryData>): void;
    getCurrentResult(): QueryObserverResult<TData, TError>;
    getNextResult(options?: ResultOptions): Promise<QueryObserverResult<TData, TError>>;
    getCurrentQuery(): Query<TQueryData, TError, TQueryFnData>;
    remove(): void;
    refetch(options?: RefetchOptions): Promise<QueryObserverResult<TData, TError>>;
    protected fetch(fetchOptions?: ObserverFetchOptions): Promise<QueryObserverResult<TData, TError>>;
    private optionalFetch;
    private executeFetch;
    private updateStaleTimeout;
    private updateRefetchInterval;
    private updateTimers;
    private clearTimers;
    private clearStaleTimeout;
    private clearRefetchInterval;
    protected getNewResult(willFetch?: boolean): QueryObserverResult<TData, TError>;
    private shouldNotifyListeners;
    private updateResult;
    private updateQuery;
    onQueryUpdate(action: Action<TData, TError>): void;
    private notify;
}
export {};
