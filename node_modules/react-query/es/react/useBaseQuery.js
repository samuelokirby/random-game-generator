import React from 'react';
import { notifyManager } from '../core/notifyManager';
import { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';
import { useQueryClient } from './QueryClientProvider';
export function useBaseQuery(options, Observer) {
  var queryClient = useQueryClient();
  var errorResetBoundary = useQueryErrorResetBoundary();
  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Include callbacks in batch renders

  if (defaultedOptions.onError) {
    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);
  }

  if (defaultedOptions.onSuccess) {
    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);
  }

  if (defaultedOptions.onSettled) {
    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);
  } // Always set stale time when using suspense to prevent
  // fetching again when directly re-mounting after suspense


  if (defaultedOptions.suspense && typeof defaultedOptions.staleTime !== 'number') {
    defaultedOptions.staleTime = 1000;
  } // Create query observer


  var observerRef = React.useRef();
  var observer = observerRef.current || new Observer(queryClient, defaultedOptions);
  observerRef.current = observer; // Update options

  if (observer.hasListeners()) {
    observer.setOptions(defaultedOptions);
  }

  var _React$useState = React.useState(function () {
    return observer.getCurrentResult();
  }),
      currentResult = _React$useState[0],
      setCurrentResult = _React$useState[1]; // Subscribe to the observer


  React.useEffect(function () {
    errorResetBoundary.clearReset();
    return observer.subscribe(notifyManager.batchCalls(setCurrentResult));
  }, [observer, errorResetBoundary]); // Handle suspense

  if (observer.options.suspense || observer.options.useErrorBoundary) {
    if (currentResult.isError && !errorResetBoundary.isReset() && !observer.getCurrentQuery().isFetching()) {
      throw currentResult.error;
    }

    if (observer.options.suspense && currentResult.isLoading) {
      errorResetBoundary.clearReset();
      var unsubscribe = observer.subscribe();
      throw observer.refetch().finally(unsubscribe);
    }
  }

  return currentResult;
}